
###################### Session/Token authentication #######################################

Create Token:

Step 1:

add installed app in settings.py

'rest_framework.authtoken'

step 2:

run migrations

step 3:


add urls.py in main project:

from rest_framework.authtoken import views

path('api-token-auth/', views.obtain_auth_token),


Create Token Manully:

step 1:

View.py code:



class UserRegistration(APIView):

    def post(self,request):

        serializer = UserSerializer(data=request.data)

        if not serializer.is_valid():
            return Response({'status':403,'errors':serializer.errors,'message':'something went wrong'})

        serializer.save()
        user = User.objects.get(username = serializer.data['username'])
        token_obj , _ = Token.objects.get_or_create(user=user)

    

        return Response({'status':200,'data':serializer.data,'token_obj':str(token_obj),'message':'your data is saved'})



Step 2:


Serilzer.py code:

from django.contrib.auth.models import User


class UserSerializer(serializers.ModelSerializer):

    class Meta:
        model = User
        fields = ['username','password']

    def create(self,validated_data):
        
        user = User.objects.create(username = validated_data['username'])
        user.set_password(validated_data['password'])  # for encrypted password
        user.save()
        return user

Step3 :

urls.py

path('register/',UserRegistration.as_view()),

Step4:

For authentication:

import Views.py

from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated


add into class:

authentication_classes = [TokenAuthentication]
permission_classes = [IsAuthenticated]




###################### JWT authentication #######################################

Step 1:

install:

pip install djangorestframework-simplejwt

Step 2: 

(Add authentication class to setting.py)

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': (
      
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

Step3:

add in urls.py

from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)


path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),


Step 4:

import in views.py

################# jwt authorization #################

from rest_framework_simplejwt.authentication import JWTAuthentication


authentication_classes = [JWTAuthentication]
permission_classes = [IsAuthenticated]


Step 5:

add time of expire:

from datetime import timedelta
...

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


Step 6:

create token manually:


add in views.py

from rest_framework_simplejwt.tokens import RefreshToken


################ for jwt ###################################
refresh = RefreshToken.for_user(user)



return Response({'status':200,
        'data':serializer.data,
        'refresh': str(refresh),
        'access': str(refresh.access_token),
        'message':'your data is saved'})




