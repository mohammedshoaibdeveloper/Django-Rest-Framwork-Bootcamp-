
###################### Session/Token authentication #######################################

Create Token:

Step 1:

add installed app in settings.py

'rest_framework.authtoken'

step 2:

run migrations

step 3:


add urls.py in main project:

from rest_framework.authtoken import views

path('api-token-auth/', views.obtain_auth_token),


Create Token Manully:

step 1:

View.py code:



class UserRegistration(APIView):

    def post(self,request):

        serializer = UserSerializer(data=request.data)

        if not serializer.is_valid():
            return Response({'status':403,'errors':serializer.errors,'message':'something went wrong'})

        serializer.save()
        user = User.objects.get(username = serializer.data['username'])
        token_obj , _ = Token.objects.get_or_create(user=user)

    

        return Response({'status':200,'data':serializer.data,'token_obj':str(token_obj),'message':'your data is saved'})



Step 2:


Serilzer.py code:

from django.contrib.auth.models import User


class UserSerializer(serializers.ModelSerializer):

    class Meta:
        model = User
        fields = ['username','password']

    def create(self,validated_data):
        
        user = User.objects.create(username = validated_data['username'])
        user.set_password(validated_data['password'])  # for encrypted password
        user.save()
        return user

Step3 :

urls.py

path('register/',UserRegistration.as_view()),

Step4:

For authentication:

import Views.py

from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated


add into class:

authentication_classes = [TokenAuthentication]
permission_classes = [IsAuthenticated]




###################### JWT authentication #######################################

Step 1:

install:

pip install djangorestframework-simplejwt

Step 2: 

(Add authentication class to setting.py)

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': (
      
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

Step3:

add in urls.py

from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)


path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),


Step 4:

import in views.py

################# jwt authorization #################

from rest_framework_simplejwt.authentication import JWTAuthentication


authentication_classes = [JWTAuthentication]
permission_classes = [IsAuthenticated]


Step 5:

add time of expire:

from datetime import timedelta
...

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


Step 6:

create token manually:


add in views.py

from rest_framework_simplejwt.tokens import RefreshToken


################ for jwt ###################################
refresh = RefreshToken.for_user(user)



return Response({'status':200,
        'data':serializer.data,
        'refresh': str(refresh),
        'access': str(refresh.access_token),
        'message':'your data is saved'})




###################### Abtract User #######################################


import into model.py

from django.contrib.auth.models import AbstractUser
from .manager import UserManager



class User(AbstractUser):
    username = None
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=12)
    is_email_verified = models.BooleanField(default=False)
    is_phone_verified = models.BooleanField(default=False)
    otp = models.CharField(max_length=255,null=True,blank=True)
    email_verification_token = models.CharField(max_length=200,null=True,blank=True)
    forget_password_token = models.CharField(max_length=200,null=True,blank=True)


    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    objects = UserManager()
    def name(self):
        return self.first_name + ' ' + self.last_name

    def __str__(self):
        return self.email 


Step 2:

create manager.py 

from django.contrib.auth.models import BaseUserManager

class UserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        """
        Creates and saves a User with the given email and password.
        """
        if not email:
            raise ValueError('Users must have an email address')
        user = self.model(email=self.normalize_email(email), **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        """
        Creates and saves a superuser with the given email and password.
        """
        user = self.create_user(email, password=password, **extra_fields)
        user.is_staff = True
        user.is_superuser = True
        user.save(using=self._db)
        return user


Step 3:

add this user to setting.py 

AUTH_USER_MODEL = 'Api.User'

Step 4:

create migration


Step 5:

add in serializer


class CustomeUserSerializer(serializers.ModelSerializer):

    class Meta:
        model = User
        fields = ['email','password','phone']

    def create(self,validated_data):
        
        user = User.objects.create(email = validated_data['email'],phone = validated_data['phone'])
        user.set_password(validated_data['password'])
        user.save()
        return user


Step 6:

add in views.py

class RegisterView(APIView):
    
    def post(self, request):

        try:

            serializer = CustomeUserSerializer(data = request.data)
            if not serializer.is_valid():

                return Response({"status":403,'errors':serializers.errors})

            serializer.save()
            return Response({"status":200,"message":"account created successfully"})

        
        except Exception as e:

            print(e)
            return Response({'status':404,'errors':'something went wrong'})



Step 7:


add in urls.py 

path('userregister/',RegisterView.as_view()),